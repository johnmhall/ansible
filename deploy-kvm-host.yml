- name: Deploy KVM Host
  hosts: all
  become: yes
  vars_files:
    - ../private/vault.yml
  vars:
    ansible_user: "{{ ansible_user }}"
  tasks:
    - name: Install KVM and management packages
      yum:
        pkg:
          - qemu-kvm
          - libvirt
          - NetworkManager-glib
          - virt-install
          - libguestfs-tools
          - libvirt-python
          - cloud-utils
          - bridge-utils
        state: present
    - name: Verify KVM kernel module
      modprobe:
        name: kvm
        state: present
    - name: Modify libvirtd configuration
      block:
        - name: Modify startup delay
          lineinfile:
            path: /etc/sysconfig/libvirt-guests
            regexp: '^START_DELAY='
            line: 'START_DELAY=60'
        - name: Modify on-boot behavior
          lineinfile:
            path: /etc/sysconfig/libvirt-guests
            regexp: '^ON_BOOT='
            line: 'ON_BOOT=ignore'
    - name: Start libvirtd
      service:
        name: libvirtd
        enabled: yes
        state: started
    # We go to all this trouble with shell commands because the nmcli module does _very strange_ things when we ask for the bridge.
    - name: Check for existing bridge
      shell: "nmcli connection | grep '^bridge-br0 '"
      register: existingbridge
      ignore_errors: yes
    - name: Create br0 Profile
      shell: "nmcli connection add type bridge ifname br0 autoconnect yes"
      when: existingbridge.failed
    - name: Get existing connection UUID
      shell: "nmcli connection | grep '^{{ ansible_default_ipv4.interface }} ' | awk '{ print $2 }'"
      when: existingbridge.failed
      register: existinguuid
    - name: Create bridge-slave connection
      shell: "nmcli connection add type bridge-slave autoconnect yes con-name {{ ansible_default_ipv4.interface }} ifname {{ ansible_default_ipv4.interface }} master bridge-br0"
      when: existingbridge.failed
    # This _still_ doesn't work properly and fails to create the correct network configuration.
    - name: Remove existing connection
      shell: "sleep 1 && nmcli connection delete {{ existinguuid.stdout }} && sleep 2"
      async: 1
      poll: 0
      when: existingbridge.failed
    - name: Reset our SSH connection for Ansible
      meta: reset_connection
    # It's very bad form to assume port 22 here but this requires additional logic I haven't written yet
    - name: Wait for the connection to recover
      wait_for:
        host: "{{ ansible_host }}"
        port: "22"
        delay: 5
        active_connection_states: ["ESTABLISHED"]
      delegate_to: localhost
      become: no
      when: existingbridge.failed
